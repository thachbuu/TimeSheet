
@{
    Layout = "~/_Layout.cshtml";

    var passwordResetToken = Request.Form["resetToken"] ?? Request.QueryString["resetToken"];

    bool tokenExpired = false;
    bool isSuccess = false;

    // Setup validation
    Validation.RequireField("newPassword", "The new password field is required.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("newPassword", "The new password and confirmation password do not match."));
    Validation.RequireField("resetToken", "The password reset token field is required.");
    Validation.Add("newPassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "New password must be at least 6 characters"));

    if (IsPost) {
        AntiForgery.Validate();
        var newPassword = Request["newPassword"];
        var confirmPassword = Request["confirmPassword"];
        passwordResetToken = Request.Form["resetToken"];
        if(Validation.IsValid()){
        if (WebSecurity.ResetPassword(passwordResetToken, newPassword)) {
            isSuccess = true;
        } else {
            ModelState.AddError("resetToken", "The password reset token is invalid.");
            tokenExpired = false;
        }
    }
    }
}

<hgroup class="title">   
    <h2>Use the form below to reset your password.</h2>
</hgroup>

@if (!WebMail.SmtpServer.IsEmpty()) {
    if (isSuccess) {
        <p class="message-success">
            Password changed! Click <a href="~/Account/Login" title="Log in">here</a> to log in.
        </p>
    }
    else{
        <form method="post">
            @AntiForgery.GetHtml()
            <fieldset>
                <legend>Password Change Form</legend>
                <ol>
                    <li class="new-password">
                        <label for="newPassword" @if (!ModelState.IsValidField("newPassword")) {<text>class="error-label"</text>}>New password</label> 
                        <input type="password" id="newPassword" name="newPassword" disabled="@isSuccess" @Validation.For("newPassword") />
                        @Html.ValidationMessage("newPassword")
                    </li>
                    <li class="confirm-password">
                        <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}>Confirm password</label> 
                        <input type="password" id="confirmPassword" name="confirmPassword" disabled="@isSuccess" @Validation.For("confirmPassword") />
                        @Html.ValidationMessage("confirmPassword")
                    </li>
                    <li class="reset-token">
                        <label for="resetToken" @if (!ModelState.IsValidField("resetToken")) {<text>class="error-label"</text>}>Password reset token</label> 
                        <input type="text" id="resetToken" name="resetToken" value="@passwordResetToken" @Validation.For("resetToken") />
                        @Html.ValidationMessage("resetToken")
                    </li>
                </ol>
                <input type="submit" value="Reset password" disabled="@isSuccess"/>
            </fieldset>
        </form>
        }
}else {
    <p class="message-info">
        Password recovery is disabled for this website because the SMTP server is 
        not configured correctly. Please contact the owner of this site to reset 
        your password.
    </p>
}
