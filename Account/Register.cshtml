@* Remove this section if you are using bundling *@


@{
    Layout = "~/_Layout.cshtml";
    Page.Title = "Create a new account.";

    //Logout if the role is not admin
    if(!(User.IsInRole("ADMIN") || User.IsInRole("MASTER"))){
        Response.Redirect("/Account/Logout");
    }

    // Initialize general page variables
    var email = "";
    var password = "";
    var confirmPassword = "";
    var firstName="";
    var lastName="";
    string roleName="";
    int projectManagerId;

    // Open database
    var db = Database.Open("StarterSite");   
            
    // Setup validation
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "Password cannot be blank.");
    Validation.RequireField("employeeId","Employee ID cannot be blank");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "Password and confirmation password do not match."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));
    Validation.RequireField("firstName","You must specify the first name.");
    Validation.RequireField("lastName","You must specify the last name.");
    Validation.Add("employeeId",Validator.Integer("Employee Id should be number"));

    // If this is a POST request, validate and process data
    if (IsPost) {
        AntiForgery.Validate();

        //Get information from user
        email = Request.Form["email"];        
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];
        firstName = Request.Form["firstName"];
        lastName= Request.Form["lastName"]; 
        roleName= Request.Form["role"];
        projectManagerId = Request.Form["supervisor"].AsInt();

        // Validate the user's captcha answer
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "Captcha response was not correct");
        // }

        // If all information is valid, create a new account
        if (Validation.IsValid()) {         

            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) { 

                // Insert email into the UserProfile table
                db.Execute("INSERT INTO UserProfile (Email,FirstName,LastName,ProjectManagerId) VALUES (@0,@1,@2,@3)", email,firstName,lastName,projectManagerId);                  
                Roles.AddUserToRole(email,roleName);
                   

                // Create and associate a new entry in the membership database.
                // If successful, continue processing the request
                try {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation) {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,
                            subject: "Please confirm your account",
                            body: "Your confirmation code is: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> to activate your account."
                        );
                    }

                    if (requireEmailConfirmation) {
                        // Thank the user for registering and let them know an email is on its way
                        Response.Redirect("~/Account/Thanks");
                    } else {
                        // Navigate back to the homepage and exit
                        WebSecurity.Login(email, password);

                        Response.Redirect("~/");
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // User already exists
                ModelState.AddFormError("Email address is already in use.");
            }
        }
    }
}

<script>
    //SET CSS FOR ACTIVE TAB
    $("#nav1").attr('class', 'componentActive');
    $("#nav1 a").css('color', 'blue');
    $("div#sub-nav1").removeClass("hidden");
    $("div#sub-nav1").children().eq(0).siblings().addClass("opacity");
</script>

<form method="post">
    @AntiForgery.GetHtml()
    @* If at least one validation error exists, notify the user *@
    @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null) 

    <fieldset id="reg-new-member">
        <legend>Member Information</legend>
        <ol>
            <li class="firstName">
                <div class="regis-component-small"><label for="firstName" @if(!ModelState.IsValidField("firstName")){<text>class="error-label"</text>}>First Name :</label></div>
                <div class="regis-component-small"><input type="text" id="firstName" name="firstName" value="@firstName" @Validation.For("firstName") /></div>
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("firstName")
            </li>
            <li class="lastName">
                <div class="regis-component-small"><label for="lastName" @if(!ModelState.IsValidField("lastName")){<text>class="error-label"</text>}>Last Name :</label></div>
                <div class="regis-component-small"><input type="text" id="lastName" name="lastName" value="@lastName" @Validation.For("lastName") /></div>
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("lastName")
            </li>
            <li class="email">
                <div class="regis-component-small"><label for="email" @if(!ModelState.IsValidField("email")){<text>class="error-label"</text>}>Email address :</label></div>
                <div class="regis-component-small"><input type="text" id="email" name="email" value="@email" @Validation.For("email") /></div>
                @* Write any email validation errors to the page *@
                @Html.ValidationMessage("email")
            </li>
            <li class="password">
                <div class="regis-component-small"><label for="password" @if(!ModelState.IsValidField("password")) {<text>class="error-label"</text>}>Password :</label></div>
                <div class="regis-component-small"><input type="password" id="password" name="password" @Validation.For("password") /></div>
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("password")
            </li>
            <li class="confirm-password">
                <div class="regis-component-small"><label for="confirmPassword" @if(!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}>Confirm password :</label></div>
                <div class="regis-component-small"><input type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") /></div>
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("confirmPassword")
            </li>
            <li>
                <div class="regis-component-small"><label for="employeeId" @if(!ModelState.IsValidField("employeeId")) {<text>class="error-label"</text>}>Employee Id :</label></div>
                <div class="regis-component-small"><input type="text" id="employeeId" name="employeeId" @Validation.For("employeeId") /></div>
                @* Write any password validation errors to the page *@
                @Html.ValidationMessage("employeeId")
            </li>
            <li class="Supervisor">
               <div class="regis-component-small"><label for="supervisor">Project Manager :</label></div>
               <div class="regis-component-small">@Html.DropDownList("supervisor",@Functions.getResources(role: "PM"))</div>
            </li>
            <li class="roles">
                <div class="regis-component-small">Role: </div>
                <div style="padding: 5px; display: inline-block">@Helpers.RolesList()</div>
            </li>
        </ol>
        <input type="submit" class="tk-button" value="Create" />
    </fieldset>
</form>