@functions {
    public static string DATABASE = "StarterSite";
    public static int getMasterUserId(){
        var db = Database.Open("StarterSite");
        var masterUserId = db.QueryValue("SELECT UserProfile.UserId FROM UserProfile,webpages_UsersInRoles AS UsersInRoles,webpages_Roles AS Roles "+  
                                         "WHERE  UserProfile.UserId = UsersInRoles.UserId AND UsersInRoles.RoleId = Roles.RoleId AND Roles.RoleName = 'MASTER'");             
        return masterUserId;
    }   

    /* GET INFORMATIONS
     ---------------------------------------------------------------------------------------------------------------
     */

     //TASK SECTION
     public static string getTaskName(int taskId){
         var db = Database.Open(DATABASE);
         return db.QueryValue("SELECT Name FROM Tasks WHERE Tasks.Id=@0",taskId);
     }

     public static List<SelectListItem>  getTasksInType(int testTypeId){
        var db = Database.Open("StarterSite");
        var taskQuery = "SELECT * " + 
                          "FROM  Tasks " +  
                          "WHERE  TypeId=testTypeId and CategoryId=1 ";
        
        var taskData = db.Query(taskQuery);    
        var taskList = new List<SelectListItem>();

        foreach(var item in taskData ){                        
                var task = new SelectListItem();
                task.Text = item.Name;
               // task.Value = item.UserId.ToString();        
               
                taskList.Add(task);            
        }
        return taskList;  
     } 

     //CATEGORY SECTION
     public static IEnumerable<dynamic> getListCategory(){
         var db = Database.Open(DATABASE);
         return db.Query("SELECT * FROM Categories");
     }

     //TEST TYPE SECTION
     public static dynamic getTestType(int testTypeId){
         var db = Database.Open(DATABASE);
         return db.QuerySingle("SELECT * From TestType WHERE Id=@0",testTypeId);
     }

     //PROJECT USER SECTION
     public static int getProjectUserId(int userId, int projectId){
         var db = Database.Open(DATABASE);
         return db.QueryValue("SELECT Id FROM Project_User WHERE UserId=@0 AND ProjectId=@1",userId, projectId);
     }


     //USERPROFILE SECTION

    public static List<SelectListItem> getResources(String currentSupervisorEmail=null,Boolean includeDefaultValue=true,String role="LEADER"){
        /**
            This function will create a list of LEADER emails but not include the ignoredEmail.
        **/
        var db = Database.Open("StarterSite");
        var supervisorQuery = "SELECT Email,UserProfile.UserId " + 
                          "FROM   UserProfile, webpages_UsersInRoles AS UsersInRoles, webpages_Roles AS Roles " +  
                          "WHERE  UserProfile.UserId=UsersInRoles.UserId AND UsersInRoles.RoleId=Roles.RoleId And Roles.RoleName=@0";
        var supervisorData = db.Query(supervisorQuery,role);    
        var resourceList = new List<SelectListItem>();

        var defaultItem = new SelectListItem(){Text = "---- Select One ----", Value = getMasterUserId().ToString(), Selected = (currentSupervisorEmail != null?true:false)};
        if(includeDefaultValue){
            resourceList.Add(defaultItem);
        }
        foreach(var item in supervisorData ){                        
                var person = new SelectListItem();
                person.Text = item.Email;
                person.Value = item.UserId.ToString();        
                if(item.Email == currentSupervisorEmail){
                    person.Selected = true;
                }else{
                    person.Selected = false;                   
                }
                resourceList.Add(person);            
        }
        return resourceList;        
    }

    //TIME MANAGEMENT SECTION
    public static string getCommentFor(string dayOfWeek,float rowId){
        var db = Database.Open(DATABASE);
        Object result = "";
        switch(dayOfWeek){            
            case "Mon":
                result = db.QueryValue("SELECT CommentForMon FROM TimeManagement WHERE Id=@0",rowId);               
                break;
            case "Tue":
                result = db.QueryValue("SELECT CommentForTue FROM TimeManagement WHERE Id=@0",rowId);
                break;
            case "Wed":
                result = db.QueryValue("SELECT CommentForWed FROM TimeManagement WHERE Id=@0",rowId);
                break;
            case "Thu":
                result = db.QueryValue("SELECT CommentForThu FROM TimeManagement WHERE Id=@0",rowId);
                break;
            case "Fri":
                result = db.QueryValue("SELECT CommentForFri FROM TimeManagement WHERE Id=@0",rowId);
                break;
            case "Sat":
                result = db.QueryValue("SELECT CommentForSat FROM TimeManagement WHERE Id=@0",rowId);
                break;
            case "Sun":
                result = db.QueryValue("SELECT CommentForSun FROM TimeManagement WHERE Id=@0",rowId);
                break;                
        }
        return result.ToString();
    }
    

     public static int getTotalUnapprovedTimeSheet(int userId){
         var db = Database.Open("StarterSite");
         /*
            GET TIMESHEET WHICH APPROVED = FALSE FOR PROJECTS WHICH USER IS WORKING ON.
         */
         //GET UNAPPROVED TIMESHEET
         var workingProject = "SELECT Id FROM Project_User WHERE UserId=@0 AND Project_User.Status='True'";
         var unapprovedTS = "SELECT DISTINCT(Project_UserId) FROM TimeManagement WHERE Project_UserId=@0 AND Approved='False'";

         //Get amount of working project
         var wkPrj = db.Query(workingProject,userId);

         int counter = 0;
        foreach(var project in wkPrj){

            //get the timesheet of project which approved = false
            var unTS = db.Query(unapprovedTS,project.Id);
            if(unTS.Count>0){
                counter++;
            }
        }
        return counter;
     }

     

     public static List<dynamic> getUsersInProject(int projectId){
         var db = Database.Open("StarterSite");
         var userInProject = db.Query("SELECT UserId FROM Project_User WHERE ProjectId=@0 AND Status='True'",projectId);
         List<dynamic> listUser = new List<dynamic>();
         foreach(var userId in userInProject){
            // var userInfo = db.QuerySingle("SELECT * FROM UserProfile WHERE UserId=@0",userId.UserId);
            var userInfo = getUserInfo(userId.UserId);
            listUser.Add(userInfo);
         }
         return listUser;
     }
     
     public static List<dynamic> getUsersInProject(int projectId,string date){
         var db = Database.Open(DATABASE);
         var userInProject = db.Query("SELECT DISTINCT UserId FROM Project_User,TimeManagement WHERE ProjectId=@0 AND Datetime=@1 AND Project_User.Id = TimeManagement.Project_UserId",projectId,date);
         List<dynamic> listUser = new List<dynamic>();
         foreach(var userId in userInProject){
            // var userInfo = db.QuerySingle("SELECT * FROM UserProfile WHERE UserId=@0",userId.UserId);
            var userInfo = getUserInfo(userId.UserId);
            listUser.Add(userInfo);
         }
         return listUser;
     }



     public static dynamic getUserInfo(int userId){
         var db = Database.Open(DATABASE);
         return db.QuerySingle("SELECT * FROM UserProfile WHERE UserId=@0",userId);
     }

     public static dynamic getProjectDetails(int projectId){
         var db = Database.Open("StarterSite");
         return db.QuerySingle("SELECT * FROM Projects WHERE ProjectId=@0",projectId);
     }

     
     /* ULTILITY METHODS
     -----------------------------------------------------------------------------------------------------
     */
     //GET WEEK OF YEAR
    public static int getWeekOfYear(DateTime expectedDate){    
        /*CAUTION: CHUA HOAN THIEN - NOT FINISHED*/
        DateTime jan1 = new DateTime(expectedDate.Year, 1, 1);    
        int daysOffset = DayOfWeek.Sunday - jan1.DayOfWeek;
        DateTime firstMonday = jan1.AddDays(daysOffset);
        int rangeDate = expectedDate.Subtract(firstMonday.Date).Days;
        int week = (rangeDate / 7) + (rangeDate % 7 >0?1:0);        
        return week;
        
    }
    public static DateTime FirstDateOfWeek(int year, int weekNum)
    {

        DateTime jan1 = new DateTime(year, 1, 1);
        int daysOffset = DayOfWeek.Monday - jan1.DayOfWeek;
        System.Globalization.CultureInfo cult_info = System.Globalization.CultureInfo.CreateSpecificCulture("no");
        DateTime firstMonday = jan1.AddDays(daysOffset);
        var cal = System.Globalization.CultureInfo.CurrentCulture.Calendar;
        int firstWeek = cal.GetWeekOfYear(firstMonday, cult_info.DateTimeFormat.CalendarWeekRule, DayOfWeek.Monday);

        if (firstWeek <= 1)
        {
            weekNum -= 1;
        }

        DateTime result = firstMonday.AddDays(weekNum * 7);

        return result;
    }
    public static DateTime FirstDateOfWeek(DateTime chosenDate)
    {
        int dayOffSet =0;
        if(chosenDate.DayOfWeek == DayOfWeek.Sunday){
            dayOffSet = -6;
        }
        else{
            dayOffSet = DayOfWeek.Monday - chosenDate.DayOfWeek;
        }         
        DateTime expectedDate = chosenDate.AddDays(dayOffSet);
        return expectedDate;        
    }

    public static List<SelectListItem> getListOfProjectsFromUser(int UserId){
        var listIem = new List<SelectListItem>();
        var db = Database.Open(DATABASE);
        var query = "SELECT Projects.ProjectName, Projects.ProjectId FROM Projects, Project_User WHERE Projects.ProjectId = Project_User.ProjectId AND Project_User.UserId=@0 " +
                    "UNION " +
                    "SELECT Projects.ProjectName, Projects.ProjectId FROM Projects WHERE ProjectManager=@0" ;
        var prjList = db.Query(query,UserId);        
        foreach(var prj in prjList){
            SelectListItem item = new SelectListItem();
            item.Text = prj.ProjectName;
            item.Value = prj.ProjectId.ToString();
            listIem.Add(item);
        }
        return listIem;
    }

    public static List<SelectListItem> getListTestType(){
        var listItem = new List<SelectListItem>();
        var db = Database.Open(DATABASE);
        var testType = db.Query("SELECT * FROM TestType");
        foreach(var type in testType){
            SelectListItem item = new SelectListItem();
            item.Text = type.Name;
            item.Value = type.Id.ToString();
            listItem.Add(item);
        }
        return listItem;

    }
     
    /*
       QUERIES SECTION
    */  
    
}